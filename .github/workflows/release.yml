name: Build and Release (PyInstaller)

on:
  push:
    branches:
      - main  # Or your development branch
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        with:
         ref: ${{ github.ref_name }}
         #If is not a tag push fetch main branch
         if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PyInstaller
        run: |
          pip install --upgrade pip
          pip install pyinstaller

name: Build and Release (PyInstaller)

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Build with PyInstaller
      run: pyinstaller --onefile getTelegram.py

    - name: Set tag name
      run: echo "tag_name=v$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.tag_name }}
        release_name: Release
        draft: false
        prerelease: false
        files: dist/getTelegram.exe

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist\getTelegram.exe
          asset_name: getTelegram.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_UPLOAD_TOKEN }}
